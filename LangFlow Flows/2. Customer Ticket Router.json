{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-HjQQP",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-kwG3z",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OpenAIModel-HjQQP{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-HjQQPœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-kwG3z{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-kwG3zœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OpenAIModel-HjQQP",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-HjQQPœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-kwG3z",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-kwG3zœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-cZiLM",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message",
            "id": "Prompt-x5U1a",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-cZiLM{œdataTypeœ:œChatInputœ,œidœ:œChatInput-cZiLMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-x5U1a{œfieldNameœ:œmessageœ,œidœ:œPrompt-x5U1aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-cZiLM",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-cZiLMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-x5U1a",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œPrompt-x5U1aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "IDGenerator",
            "id": "IDGenerator-5MIte",
            "name": "id",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message_id",
            "id": "Prompt-x5U1a",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-IDGenerator-5MIte{œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-5MIteœ,œnameœ:œidœ,œoutput_typesœ:[œMessageœ]}-Prompt-x5U1a{œfieldNameœ:œmessage_idœ,œidœ:œPrompt-x5U1aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "IDGenerator-5MIte",
        "sourceHandle": "{œdataTypeœ:œIDGeneratorœ,œidœ:œIDGenerator-5MIteœ,œnameœ:œidœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-x5U1a",
        "targetHandle": "{œfieldNameœ:œmessage_idœ,œidœ:œPrompt-x5U1aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CurrentDate",
            "id": "CurrentDate-03i0q",
            "name": "current_date",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message_date",
            "id": "Prompt-x5U1a",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-CurrentDate-03i0q{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-03i0qœ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}-Prompt-x5U1a{œfieldNameœ:œmessage_dateœ,œidœ:œPrompt-x5U1aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CurrentDate-03i0q",
        "sourceHandle": "{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-03i0qœ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-x5U1a",
        "targetHandle": "{œfieldNameœ:œmessage_dateœ,œidœ:œPrompt-x5U1aœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-x5U1a",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-HjQQP",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-x5U1a{œdataTypeœ:œPromptœ,œidœ:œPrompt-x5U1aœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-HjQQP{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-HjQQPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-x5U1a",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-x5U1aœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-HjQQP",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-HjQQPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Generates text using OpenAI LLMs.",
          "display_name": "OpenAI",
          "id": "OpenAIModel-HjQQP",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": [
                  "api_key"
                ],
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import (\n    OPENAI_MODEL_NAMES,\n    OPENAI_REASONING_MODEL_NAMES,\n)\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\nfrom langflow.logging import logger\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[1],\n            combobox=True,\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            show=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        parameters = {\n            \"api_key\": SecretStr(self.api_key).get_secret_value() if self.api_key else None,\n            \"model_name\": self.model_name,\n            \"max_tokens\": self.max_tokens or None,\n            \"model_kwargs\": self.model_kwargs or {},\n            \"base_url\": self.openai_api_base or \"https://api.openai.com/v1\",\n            \"seed\": self.seed,\n            \"max_retries\": self.max_retries,\n            \"timeout\": self.timeout,\n            \"temperature\": self.temperature if self.temperature is not None else 0.1,\n        }\n\n        logger.info(f\"Model name: {self.model_name}\")\n        if self.model_name in OPENAI_REASONING_MODEL_NAMES:\n            logger.info(\"Getting reasoning model parameters\")\n            parameters.pop(\"temperature\")\n            parameters.pop(\"seed\")\n        output = ChatOpenAI(**parameters)\n        if self.json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_REASONING_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = False\n            build_config[\"seed\"][\"show\"] = False\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = True\n            build_config[\"seed\"][\"show\"] = True\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message to pass to the model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an NLP expert assisting the technical team in analyzing user messages. The analysis will be used by the team to make decisions more effectively.\n\nYou will be provided with the message_id and date along with the message.\n\n**Task 1:**\n#### **1. Message Classification **\nClassify the message into a **single category** that best describes its purpose. Choose the category from the predefined list below. This classification will help the technical team identify specific themes and make decisions faster.\n\n- **Order Management**: A message regarding the status of the order that user has placed.\n- **Application Support**: A message regarding the web or mobile application functionality.\n- **Service Feedback**: A message regarding customer service.\n- **Shopping Assistance**: A message requiring assistance in shopping.\n- **Others**: A general message.\n- **Spam**: A message that seems like spam.\n\n\n##### **Important Instructions for Classification:**\n- Ensure each message is classified into **only one category** based on its primary intent or purpose. If multiple intents are detected, select the most relevant category that reflects the user's main goal.\n- Do not create new categories or use freeform text for classification. Always use one of the predefined categories exactly as they appear in the list above.\n\n**task 2**\nAnalyze the sentiment of the message and classify it into one of the following categories:\n- **Positive**: The message conveys positivity, satisfaction, gratitude, or encouragement.\n- **Neutral**: The message is factual, descriptive, or lacks any emotional tone.\n- **Negative**: The message conveys frustration, dissatisfaction, or criticism.\n\nRespond in JSON Format.\n\nmessage_id:\nmessage_date:\nmessage_category:\nmessage_sentiment:\n"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAIModel"
        },
        "dragging": false,
        "id": "OpenAIModel-HjQQP",
        "measured": {
          "height": 614,
          "width": 320
        },
        "position": {
          "x": -1535.1823795300347,
          "y": 563.0026756452658
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatInput-cZiLM",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-cZiLM",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": -2374.8340811404923,
          "y": 525.0620211901137
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-kwG3z",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Green"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-kwG3z",
        "measured": {
          "height": 274,
          "width": 320
        },
        "position": {
          "x": -779.733611898343,
          "y": 714.0648111654205
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "IDGenerator-5MIte",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates a unique ID.",
            "display_name": "ID Generator",
            "documentation": "",
            "edited": false,
            "field_order": [
              "unique_id"
            ],
            "frozen": false,
            "icon": "fingerprint",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "ID",
                "hidden": null,
                "method": "generate_id",
                "name": "id",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import uuid\nfrom typing import Any\n\nfrom typing_extensions import override\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import dotdict\nfrom langflow.schema.message import Message\n\n\nclass IDGeneratorComponent(Component):\n    display_name = \"ID Generator\"\n    description = \"Generates a unique ID.\"\n    icon = \"fingerprint\"\n    name = \"IDGenerator\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"unique_id\",\n            display_name=\"Value\",\n            info=\"The generated unique ID.\",\n            refresh_button=True,\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"ID\", name=\"id\", method=\"generate_id\"),\n    ]\n\n    @override\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"unique_id\":\n            build_config[field_name][\"value\"] = str(uuid.uuid4())\n        return build_config\n\n    def generate_id(self) -> Message:\n        unique_id = self.unique_id or str(uuid.uuid4())\n        self.status = f\"Generated ID: {unique_id}\"\n        return Message(text=unique_id)\n"
              },
              "unique_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Value",
                "dynamic": false,
                "info": "The generated unique ID.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "unique_id",
                "placeholder": "",
                "refresh_button": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "169ae6fe-0462-4ba8-84d9-47f6015d575c"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "IDGenerator"
        },
        "dragging": false,
        "id": "IDGenerator-5MIte",
        "measured": {
          "height": 230,
          "width": 320
        },
        "position": {
          "x": -2500.5034694802393,
          "y": 1183.8851532584674
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CurrentDate-03i0q",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Returns the current date and time in the selected timezone.",
            "display_name": "Current Date",
            "documentation": "",
            "edited": false,
            "field_order": [
              "timezone"
            ],
            "frozen": false,
            "icon": "clock",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Current Date",
                "hidden": false,
                "method": "get_current_date",
                "name": "current_date",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime\nfrom zoneinfo import ZoneInfo, available_timezones\n\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CurrentDateComponent(Component):\n    display_name = \"Current Date\"\n    description = \"Returns the current date and time in the selected timezone.\"\n    icon = \"clock\"\n    name = \"CurrentDate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"timezone\",\n            display_name=\"Timezone\",\n            options=list(available_timezones()),\n            value=\"UTC\",\n            info=\"Select the timezone for the current date and time.\",\n            tool_mode=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Current Date\", name=\"current_date\", method=\"get_current_date\"),\n    ]\n\n    def get_current_date(self) -> Message:\n        try:\n            tz = ZoneInfo(self.timezone)\n            current_date = datetime.now(tz).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            result = f\"Current date and time in {self.timezone}: {current_date}\"\n            self.status = result\n            return Message(text=result)\n        except Exception as e:  # noqa: BLE001\n            logger.opt(exception=True).debug(\"Error getting current date\")\n            error_message = f\"Error: {e}\"\n            self.status = error_message\n            return Message(text=error_message)\n"
              },
              "timezone": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Select the timezone for the current date and time.",
                "name": "timezone",
                "options": [
                  "America/Matamoros",
                  "Asia/Chita",
                  "Etc/GMT+8",
                  "America/Santa_Isabel",
                  "Africa/Lome",
                  "Pacific/Tarawa",
                  "America/Yakutat",
                  "Pacific/Tongatapu",
                  "Etc/UTC",
                  "Africa/Lagos",
                  "Europe/Simferopol",
                  "America/Creston",
                  "Australia/Currie",
                  "NZ",
                  "Antarctica/Syowa",
                  "Antarctica/Troll",
                  "America/Vancouver",
                  "Asia/Dubai",
                  "Asia/Yakutsk",
                  "America/Argentina/Rio_Gallegos",
                  "America/Sao_Paulo",
                  "Asia/Amman",
                  "America/Bogota",
                  "Asia/Kabul",
                  "Pacific/Enderbury",
                  "America/Cancun",
                  "Australia/NSW",
                  "CST6CDT",
                  "America/Iqaluit",
                  "America/Indiana/Winamac",
                  "Etc/GMT+7",
                  "Europe/Uzhgorod",
                  "Asia/Choibalsan",
                  "America/New_York",
                  "Asia/Bangkok",
                  "Etc/GMT+12",
                  "Etc/UCT",
                  "Asia/Vientiane",
                  "Indian/Chagos",
                  "US/East-Indiana",
                  "Australia/Lord_Howe",
                  "CET",
                  "Asia/Kuala_Lumpur",
                  "Pacific/Gambier",
                  "Africa/Bamako",
                  "Asia/Tel_Aviv",
                  "Europe/Tiraspol",
                  "Canada/Mountain",
                  "Europe/Stockholm",
                  "Asia/Samarkand",
                  "Etc/GMT+3",
                  "Pacific/Galapagos",
                  "US/Eastern",
                  "America/Punta_Arenas",
                  "Brazil/Acre",
                  "America/Thule",
                  "Asia/Damascus",
                  "Asia/Pontianak",
                  "Asia/Kolkata",
                  "Europe/Oslo",
                  "Europe/Vienna",
                  "Africa/Bangui",
                  "America/Indiana/Vincennes",
                  "NZ-CHAT",
                  "GB",
                  "America/Chihuahua",
                  "America/Lower_Princes",
                  "Australia/Darwin",
                  "Asia/Baku",
                  "Atlantic/Reykjavik",
                  "America/Indianapolis",
                  "America/Cuiaba",
                  "America/Denver",
                  "Africa/Sao_Tome",
                  "Africa/Porto-Novo",
                  "Canada/Eastern",
                  "America/Blanc-Sablon",
                  "Europe/Gibraltar",
                  "Pacific/Majuro",
                  "UCT",
                  "GMT",
                  "America/Sitka",
                  "America/Atikokan",
                  "America/Goose_Bay",
                  "Africa/Nouakchott",
                  "Etc/GMT+1",
                  "America/Santiago",
                  "Africa/Maputo",
                  "Australia/ACT",
                  "America/Halifax",
                  "Hongkong",
                  "Pacific/Marquesas",
                  "Asia/Kashgar",
                  "Europe/Berlin",
                  "Etc/GMT+2",
                  "Asia/Chungking",
                  "Etc/GMT-10",
                  "Etc/GMT-4",
                  "Etc/GMT+11",
                  "Atlantic/Faeroe",
                  "Pacific/Auckland",
                  "Indian/Mauritius",
                  "Europe/Rome",
                  "Jamaica",
                  "Africa/Dar_es_Salaam",
                  "Africa/Ndjamena",
                  "America/Adak",
                  "Pacific/Nauru",
                  "Canada/Central",
                  "Europe/Tallinn",
                  "America/North_Dakota/Beulah",
                  "Pacific/Guam",
                  "America/Montreal",
                  "Etc/GMT+10",
                  "Egypt",
                  "Asia/Riyadh",
                  "Asia/Manila",
                  "Europe/Kyiv",
                  "Etc/GMT+4",
                  "America/Dominica",
                  "Pacific/Norfolk",
                  "Europe/Vilnius",
                  "US/Alaska",
                  "Asia/Kamchatka",
                  "America/Rankin_Inlet",
                  "Asia/Ashkhabad",
                  "America/Guatemala",
                  "Chile/Continental",
                  "Factory",
                  "America/Argentina/Jujuy",
                  "America/Metlakatla",
                  "Asia/Magadan",
                  "Pacific/Fiji",
                  "Europe/Andorra",
                  "Africa/Algiers",
                  "America/Argentina/La_Rioja",
                  "Europe/Minsk",
                  "Europe/Tirane",
                  "Australia/Queensland",
                  "Europe/Luxembourg",
                  "America/Indiana/Knox",
                  "Singapore",
                  "America/Anchorage",
                  "America/Argentina/Salta",
                  "Asia/Oral",
                  "Asia/Makassar",
                  "Brazil/East",
                  "Asia/Kathmandu",
                  "Asia/Omsk",
                  "Asia/Muscat",
                  "Europe/Amsterdam",
                  "Etc/Zulu",
                  "America/Port-au-Prince",
                  "America/Montevideo",
                  "Europe/Malta",
                  "Asia/Krasnoyarsk",
                  "Pacific/Honolulu",
                  "America/Argentina/Buenos_Aires",
                  "Asia/Chongqing",
                  "America/Tijuana",
                  "Asia/Tashkent",
                  "America/Pangnirtung",
                  "Antarctica/McMurdo",
                  "Mexico/General",
                  "Africa/Asmara",
                  "Europe/Bratislava",
                  "America/Antigua",
                  "Europe/Madrid",
                  "Pacific/Funafuti",
                  "Europe/Monaco",
                  "Africa/Accra",
                  "Indian/Mayotte",
                  "Africa/Bissau",
                  "Africa/Johannesburg",
                  "America/Nassau",
                  "Etc/GMT-7",
                  "America/Coyhaique",
                  "Australia/Hobart",
                  "America/Managua",
                  "Europe/Jersey",
                  "America/St_Johns",
                  "America/Havana",
                  "America/Recife",
                  "Africa/Djibouti",
                  "Indian/Reunion",
                  "Asia/Macao",
                  "Europe/Kaliningrad",
                  "Pacific/Fakaofo",
                  "Indian/Kerguelen",
                  "Asia/Srednekolymsk",
                  "Europe/Podgorica",
                  "Asia/Qyzylorda",
                  "America/Rosario",
                  "America/Ojinaga",
                  "Africa/Lusaka",
                  "MET",
                  "America/Ensenada",
                  "Africa/Cairo",
                  "UTC",
                  "America/Manaus",
                  "America/Knox_IN",
                  "Brazil/West",
                  "MST",
                  "Pacific/Johnston",
                  "Asia/Qostanay",
                  "America/Cambridge_Bay",
                  "Japan",
                  "Africa/Libreville",
                  "Iran",
                  "Europe/Zaporozhye",
                  "America/Nuuk",
                  "Zulu",
                  "America/Glace_Bay",
                  "America/Danmarkshavn",
                  "Pacific/Apia",
                  "US/Samoa",
                  "localtime",
                  "Asia/Jerusalem",
                  "Chile/EasterIsland",
                  "ROC",
                  "Europe/Ulyanovsk",
                  "America/Anguilla",
                  "Greenwich",
                  "Pacific/Truk",
                  "Asia/Ust-Nera",
                  "Europe/Nicosia",
                  "Asia/Katmandu",
                  "America/Resolute",
                  "Pacific/Pago_Pago",
                  "Antarctica/Casey",
                  "Asia/Phnom_Penh",
                  "Indian/Maldives",
                  "Pacific/Bougainville",
                  "Europe/Isle_of_Man",
                  "Australia/Brisbane",
                  "Africa/Douala",
                  "Asia/Urumqi",
                  "Pacific/Wake",
                  "Africa/Tripoli",
                  "Europe/London",
                  "Asia/Taipei",
                  "America/Guyana",
                  "Australia/Perth",
                  "Universal",
                  "Israel",
                  "America/Barbados",
                  "America/Port_of_Spain",
                  "America/Tegucigalpa",
                  "America/Montserrat",
                  "Asia/Tehran",
                  "PRC",
                  "US/Hawaii",
                  "America/Fort_Nelson",
                  "Pacific/Tahiti",
                  "America/Bahia_Banderas",
                  "Antarctica/Mawson",
                  "Pacific/Rarotonga",
                  "Africa/Ceuta",
                  "EST",
                  "Iceland",
                  "Asia/Tomsk",
                  "Asia/Barnaul",
                  "America/Asuncion",
                  "Asia/Dili",
                  "Asia/Hovd",
                  "Arctic/Longyearbyen",
                  "Asia/Istanbul",
                  "Asia/Kuwait",
                  "Pacific/Kiritimati",
                  "America/St_Barthelemy",
                  "Asia/Ashgabat",
                  "America/Paramaribo",
                  "Africa/Juba",
                  "Canada/Yukon",
                  "Asia/Yekaterinburg",
                  "America/Nipigon",
                  "Europe/Dublin",
                  "America/Eirunepe",
                  "Etc/GMT+9",
                  "Europe/Sofia",
                  "Asia/Bishkek",
                  "Pacific/Port_Moresby",
                  "America/Ciudad_Juarez",
                  "Antarctica/Vostok",
                  "Pacific/Kanton",
                  "America/Argentina/Mendoza",
                  "America/Moncton",
                  "America/Argentina/San_Juan",
                  "Asia/Thimbu",
                  "Australia/Victoria",
                  "Canada/Atlantic",
                  "Canada/Saskatchewan",
                  "Asia/Brunei",
                  "Atlantic/Bermuda",
                  "Africa/Monrovia",
                  "Asia/Rangoon",
                  "HST",
                  "Etc/GMT-9",
                  "Australia/Broken_Hill",
                  "Asia/Bahrain",
                  "Libya",
                  "Africa/Khartoum",
                  "Atlantic/Madeira",
                  "Africa/Casablanca",
                  "America/Hermosillo",
                  "Australia/Canberra",
                  "US/Arizona",
                  "America/Jujuy",
                  "America/Guayaquil",
                  "America/Shiprock",
                  "Antarctica/Macquarie",
                  "America/Argentina/Ushuaia",
                  "America/Campo_Grande",
                  "Asia/Hong_Kong",
                  "America/Araguaina",
                  "Etc/GMT-13",
                  "Asia/Karachi",
                  "Asia/Aqtobe",
                  "America/St_Kitts",
                  "America/Dawson_Creek",
                  "Antarctica/Rothera",
                  "Australia/Lindeman",
                  "Asia/Ho_Chi_Minh",
                  "America/Monterrey",
                  "America/Costa_Rica",
                  "Australia/Adelaide",
                  "Africa/Kampala",
                  "Africa/Maseru",
                  "Asia/Calcutta",
                  "GMT+0",
                  "Asia/Ujung_Pandang",
                  "Africa/Nairobi",
                  "Etc/GMT0",
                  "Asia/Seoul",
                  "Atlantic/Stanley",
                  "America/Yellowknife",
                  "Europe/Warsaw",
                  "Europe/Zagreb",
                  "Europe/Vatican",
                  "Canada/Pacific",
                  "America/Curacao",
                  "Australia/North",
                  "Australia/South",
                  "Africa/Mbabane",
                  "America/Boise",
                  "Navajo",
                  "Etc/GMT-0",
                  "GMT-0",
                  "Europe/Budapest",
                  "America/Virgin",
                  "Pacific/Noumea",
                  "Europe/Sarajevo",
                  "Europe/Chisinau",
                  "Europe/Athens",
                  "Asia/Yangon",
                  "US/Central",
                  "Africa/Bujumbura",
                  "Africa/Conakry",
                  "America/Menominee",
                  "Africa/Kigali",
                  "America/Chicago",
                  "Europe/Riga",
                  "Europe/Zurich",
                  "Indian/Comoro",
                  "Europe/San_Marino",
                  "Africa/Brazzaville",
                  "Asia/Sakhalin",
                  "Asia/Macau",
                  "Asia/Dhaka",
                  "Africa/Blantyre",
                  "America/Whitehorse",
                  "America/Mexico_City",
                  "Asia/Tbilisi",
                  "America/North_Dakota/New_Salem",
                  "US/Indiana-Starke",
                  "America/Kralendijk",
                  "US/Pacific",
                  "Indian/Cocos",
                  "Africa/Timbuktu",
                  "Atlantic/Canary",
                  "America/Argentina/Catamarca",
                  "Asia/Kuching",
                  "Australia/Melbourne",
                  "America/Tortola",
                  "Antarctica/Davis",
                  "Asia/Famagusta",
                  "America/Inuvik",
                  "Africa/Malabo",
                  "Pacific/Niue",
                  "America/Coral_Harbour",
                  "Europe/Saratov",
                  "Asia/Qatar",
                  "Australia/LHI",
                  "America/Grand_Turk",
                  "Poland",
                  "Europe/Paris",
                  "EST5EDT",
                  "America/Jamaica",
                  "America/Miquelon",
                  "Asia/Tokyo",
                  "Etc/Universal",
                  "US/Mountain",
                  "Africa/Tunis",
                  "America/Atka",
                  "America/Belem",
                  "Asia/Harbin",
                  "America/Guadeloupe",
                  "Australia/Yancowinna",
                  "America/Aruba",
                  "Africa/El_Aaiun",
                  "America/St_Vincent",
                  "Etc/GMT-5",
                  "EET",
                  "America/Maceio",
                  "America/Detroit",
                  "Europe/Astrakhan",
                  "Pacific/Guadalcanal",
                  "America/Cayenne",
                  "Europe/Ljubljana",
                  "Etc/GMT+6",
                  "Asia/Beirut",
                  "Etc/GMT+5",
                  "America/Cordoba",
                  "Asia/Aden",
                  "Asia/Pyongyang",
                  "ROK",
                  "Australia/West",
                  "Etc/Greenwich",
                  "Asia/Dacca",
                  "America/Bahia",
                  "Africa/Lubumbashi",
                  "America/Porto_Velho",
                  "GMT0",
                  "America/Edmonton",
                  "Europe/Volgograd",
                  "Mexico/BajaNorte",
                  "Africa/Dakar",
                  "Africa/Ouagadougou",
                  "Africa/Niamey",
                  "Asia/Baghdad",
                  "Pacific/Wallis",
                  "Etc/GMT-12",
                  "Asia/Vladivostok",
                  "Europe/Lisbon",
                  "Antarctica/Palmer",
                  "Asia/Dushanbe",
                  "America/Boa_Vista",
                  "Atlantic/Cape_Verde",
                  "America/Indiana/Petersburg",
                  "America/Indiana/Tell_City",
                  "Australia/Eucla",
                  "Asia/Novokuznetsk",
                  "America/Mazatlan",
                  "Europe/Helsinki",
                  "Asia/Novosibirsk",
                  "Europe/Bucharest",
                  "Africa/Abidjan",
                  "Etc/GMT-8",
                  "Europe/Belfast",
                  "America/Rainy_River",
                  "Pacific/Kwajalein",
                  "America/Cayman",
                  "Eire",
                  "Asia/Khandyga",
                  "Europe/Moscow",
                  "America/Swift_Current",
                  "GB-Eire",
                  "Turkey",
                  "Africa/Asmera",
                  "Africa/Gaborone",
                  "Pacific/Ponape",
                  "Asia/Atyrau",
                  "US/Michigan",
                  "Indian/Christmas",
                  "America/Kentucky/Monticello",
                  "Etc/GMT-6",
                  "Europe/Guernsey",
                  "Pacific/Pohnpei",
                  "America/Argentina/Cordoba",
                  "W-SU",
                  "Etc/GMT-2",
                  "Etc/GMT",
                  "Asia/Irkutsk",
                  "Pacific/Efate",
                  "America/Buenos_Aires",
                  "America/Catamarca",
                  "Asia/Aqtau",
                  "Pacific/Samoa",
                  "Europe/Istanbul",
                  "Europe/Skopje",
                  "Pacific/Midway",
                  "America/Puerto_Rico",
                  "America/Martinique",
                  "Europe/Brussels",
                  "America/Panama",
                  "America/Argentina/San_Luis",
                  "Canada/Newfoundland",
                  "America/Porto_Acre",
                  "Asia/Anadyr",
                  "Indian/Mahe",
                  "America/Argentina/Tucuman",
                  "America/Belize",
                  "America/La_Paz",
                  "Brazil/DeNoronha",
                  "US/Aleutian",
                  "America/Kentucky/Louisville",
                  "Atlantic/Jan_Mayen",
                  "WET",
                  "Asia/Hebron",
                  "Europe/Kirov",
                  "Asia/Jakarta",
                  "America/Indiana/Marengo",
                  "America/Toronto",
                  "Europe/Vaduz",
                  "America/Indiana/Vevay",
                  "Pacific/Chatham",
                  "America/Marigot",
                  "Cuba",
                  "Europe/Mariehamn",
                  "Pacific/Kosrae",
                  "Pacific/Saipan",
                  "America/Nome",
                  "Pacific/Palau",
                  "Atlantic/South_Georgia",
                  "America/Scoresbysund",
                  "America/Caracas",
                  "Australia/Tasmania",
                  "Etc/GMT+0",
                  "Africa/Kinshasa",
                  "America/Winnipeg",
                  "America/Louisville",
                  "America/Dawson",
                  "Portugal",
                  "Atlantic/St_Helena",
                  "Africa/Addis_Ababa",
                  "America/Mendoza",
                  "Europe/Prague",
                  "PST8PDT",
                  "Europe/Copenhagen",
                  "MST7MDT",
                  "Africa/Luanda",
                  "America/Rio_Branco",
                  "Europe/Kiev",
                  "America/Regina",
                  "America/Thunder_Bay",
                  "Asia/Shanghai",
                  "Africa/Harare",
                  "Africa/Mogadishu",
                  "Kwajalein",
                  "America/Fort_Wayne",
                  "America/El_Salvador",
                  "Africa/Windhoek",
                  "Etc/GMT-1",
                  "Pacific/Yap",
                  "Asia/Nicosia",
                  "America/Grenada",
                  "Europe/Samara",
                  "America/Phoenix",
                  "Asia/Yerevan",
                  "Asia/Jayapura",
                  "America/Argentina/ComodRivadavia",
                  "America/Los_Angeles",
                  "America/Santo_Domingo",
                  "Pacific/Pitcairn",
                  "Mexico/BajaSur",
                  "Europe/Belgrade",
                  "America/Fortaleza",
                  "Africa/Banjul",
                  "Etc/GMT-11",
                  "Asia/Ulaanbaatar",
                  "Asia/Saigon",
                  "Antarctica/DumontDUrville",
                  "Atlantic/Azores",
                  "Pacific/Easter",
                  "Africa/Freetown",
                  "Etc/GMT-3",
                  "Asia/Almaty",
                  "Australia/Sydney",
                  "Antarctica/South_Pole",
                  "America/Indiana/Indianapolis",
                  "Atlantic/Faroe",
                  "America/St_Thomas",
                  "America/North_Dakota/Center",
                  "Asia/Ulan_Bator",
                  "Etc/GMT-14",
                  "America/Santarem",
                  "Asia/Thimphu",
                  "Asia/Gaza",
                  "Asia/Colombo",
                  "America/Noronha",
                  "America/Lima",
                  "America/St_Lucia",
                  "America/Juneau",
                  "Asia/Singapore",
                  "America/Godthab",
                  "Pacific/Chuuk",
                  "Indian/Antananarivo",
                  "Europe/Busingen",
                  "America/Merida"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Etc/GMT"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "CurrentDate"
        },
        "dragging": false,
        "id": "CurrentDate-03i0q",
        "measured": {
          "height": 250,
          "width": 320
        },
        "position": {
          "x": -2543.5786967560525,
          "y": 708.0064519256721
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-x5U1a",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "message",
                "message_id",
                "message_date"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "hidden": false,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": null,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "message": {
                "advanced": false,
                "display_name": "message",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "message_date": {
                "advanced": false,
                "display_name": "message_date",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "message_date",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "message_id": {
                "advanced": false,
                "display_name": "message_id",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "message_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "Message: {message}\nMessage_id: {message_id}\nMessgage_date: {message_date}\n"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "dragging": false,
        "id": "Prompt-x5U1a",
        "measured": {
          "height": 532,
          "width": 320
        },
        "position": {
          "x": -1954.8839239866033,
          "y": 558.2687571097495
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1673.7744461836473,
      "y": -169.17714893804794,
      "zoom": 0.6324846360112208
    }
  },
  "description": "Assigns the user's message to the relevant team along with a summary of the message.",
  "endpoint_name": null,
  "id": "849ae84d-7d3c-43fc-8bf5-bae7164aff12",
  "is_component": false,
  "last_tested_version": "1.4.1",
  "name": "S2. Customer Ticket Router",
  "tags": [
    "classification"
  ]
}